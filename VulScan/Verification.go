package VulScan

import (
	"fmt"
	"net/http"
	"time"
)

func Verification(url string, msg string) bool {
	client := http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		recover()
	}
	resp, err := client.Do(req)
	if err != nil {
		recover()
	}
	if resp != nil {
		if resp.StatusCode == 200 {
			//fmt.Printf("\x1b[%dm[+]存在漏洞：%s \x1b[0m\n", 31, msg)
			fmt.Print("\x1b[1;31m") // 可选三个参数，依次为：VT100控制码；前景色，背景色，m放在最后一个参数后面，如果m放第一个参数，那么会导致后面的参数被截断
			fmt.Println("[+]存在漏洞：" + msg)
			//fmt.Printf("\x1b[%dm[+]文件写入成功：%s \x1b[0m\n", 31, url)
			fmt.Println("[+]文件写入成功：" + url)
			fmt.Print("\x1b[0m") //样式结束符，清除之前的显示属性
			fmt.Println("=========================================================================")
			return true
		} else {
			if msg == "SessionGetshell" {
				fmt.Println("[-]解压附件失败")
			}
			fmt.Println("[-]不存在漏洞：" + msg)
			fmt.Println("=========================================================================")
			return false
		}
	}
	return false
}

/*
VT100 控制码
\033[0m        // 关闭所有属性
\033[1m        // 设置为高亮
\033[4m        // 下划线
\033[5m        // 闪烁
\033[7m        // 反显
\033[8m        // 消隐
\033[nA        // 光标上移 n 行
\033[nB        // 光标下移 n 行
\033[nC        // 光标右移 n 行
\033[nD        // 光标左移 n 行
\033[y;xH    // 设置光标位置
\033[2J        // 清屏
\033[K        // 清除从光标到行尾的内容
\033[s        // 保存光标位置
\033[u        // 恢复光标位置
\033[?25l    // 隐藏光标
\033[?25h    // 显示光标
前景色
30: 黑色
31: 红色
32: 绿色
33: 黄色
34: 蓝色
35: 紫色
36: 青色
37: 白色
背景色
40: 黑色
41: 红色
42: 绿色
43: 黄色
44: 蓝色
45: 紫色
46: 青色
47: 白色
*/
